#include <stdio.h>
#include <stdlib.h> // for malloc function
#include <time.h> // for time(NULL) inside of srand()

int main() {
	// define the list type with an int and next pointer
	typedef struct list {
		int data;
		struct list *next;
	} list;
	
	// to check if a list is empty
	int is_empty(const list *l){ return (l == NULL);}
	
	// to create a list with its data of a given int and empty pointer 
	list * create_list(int d)
	{
		list *head = malloc(sizeof(list));
		head -> data = d;
		head -> next = NULL;
		return head;
	}

	// to add a list with the given int data in front of the given list
	list * add_to_front(int d, list *h)
	{
		list *head = create_list(d);
		head -> next = h;
		return head;
	}

	// function to print the data in a list with a title
	void print_list(list *h, char *title)
	{
		printf("%s\n", title);
		int k = 0;
		while (!is_empty(h)) {
			if(k % 20 == 0) printf("\n"); // 20 results per a row
			printf ("%d :", h -> data);
			h = h -> next;
			k += 1;
		}
		printf("\n\n");
	}

	// swap function to swap the data between two lists
	void swap(list *a, list *b)
	{
		int temp = a -> data;
		a -> data = b -> data;
		b -> data = temp;
	}

	// bubble sort function
	void bubble(list *h)
	{
		int swapped; // 1 when there are values to swap, otherwise 0
		list *tail = NULL;
		list *temp;
		do {
			temp = h; // temp to for bubble sort while h stays the same at the head
			swapped = 0;
			while (temp -> next != tail)
			{
				if (temp -> data > temp -> next -> data) // if certain two adjacent values are out of order
				{ 		
					swap(temp, temp -> next); // then sort the two values
					swapped = 1; // swapped value becomes 1
				}	
		       		temp = temp -> next; // moves to the next list(node)
			}
			tail = temp; // one less element after each bubble sort
		} while (swapped); // stops when there is nothing left to be sorted
	}

	list *head; // a list to store 100 random ints
	
	int i = 0;
	srand(time(NULL)); // random seed to generate 100 random ints

	for (i = 0; i < 100; i++) {
		int temp = rand(); // generate a random int
		if (i == 0) head = create_list(temp); // create the list with the first int
		else head = add_to_front(temp, head); // store the random int at the front
	}
	
	print_list(head, "random 100 integers"); // print the list before bubble sort
	
	bubble(head); // do bubble sort

	print_list(head, "The result of bubble sort"); // print the list after bubble sort
	return 0;
}